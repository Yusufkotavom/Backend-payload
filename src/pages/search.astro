---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout 
  title="Search - Astro + Flowbite Blog"
  description="Search through all blog posts and pages to find exactly what you're looking for."
  type="website"
>
  <!-- Search Hero Section -->
  <section class="bg-white dark:bg-gray-900" data-animate>
    <div class="py-8 px-4 mx-auto max-w-screen-xl text-center lg:py-16">
      <h1 class="mb-4 text-4xl font-extrabold tracking-tight leading-none text-gray-900 md:text-5xl lg:text-6xl dark:text-white">
        Search
      </h1>
      <p class="mb-8 text-lg font-normal text-gray-500 lg:text-xl sm:px-16 lg:px-48 dark:text-gray-400">
        Find articles, tutorials, and insights across our entire blog. Search by title, content, tags, or author.
      </p>
      
      <!-- Enhanced Search Interface -->
      <div class="max-w-2xl mx-auto mb-8">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
            </svg>
          </div>
          <div id="search" class="block w-full p-4 pl-12 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"></div>
          <button type="button" id="clear-search" class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hidden">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Search Filters -->
        <div class="flex flex-wrap gap-2 mt-4 justify-center">
          <button type="button" class="search-filter active" data-filter="all">
            All Content
          </button>
          <button type="button" class="search-filter" data-filter="blog">
            Blog Posts
          </button>
          <button type="button" class="search-filter" data-filter="pages">
            Pages
          </button>
          <button type="button" class="search-filter" data-filter="recent">
            Recent
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Search Results Section -->
  <section class="bg-gray-50 dark:bg-gray-800" data-animate>
    <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16">
      <!-- Search Stats -->
      <div id="search-stats" class="mb-6 text-center hidden">
        <p class="text-sm text-gray-600 dark:text-gray-400">
          <span id="search-time"></span> â€¢ <span id="search-count"></span>
        </p>
      </div>
      
      <!-- Search Results Container -->
      <div id="search-results" class="space-y-6">
        <!-- Initial State -->
        <div id="search-initial" class="text-center py-16">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">Start searching</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Enter a search term to find relevant content</p>
        </div>
        
        <!-- Loading State -->
        <div id="search-loading" class="text-center py-16 hidden">
          <div class="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-gray-500 bg-white dark:bg-gray-800 dark:text-gray-400 transition ease-in-out duration-150">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Searching...
          </div>
        </div>
        
        <!-- No Results State -->
        <div id="search-no-results" class="text-center py-16 hidden">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No results found</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Try different keywords or browse our <a href="/blog" class="text-blue-600 hover:text-blue-500">latest posts</a></p>
        </div>
      </div>
      
      <!-- Popular Searches -->
      <div id="popular-searches" class="mt-12" data-animate>
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Popular Searches</h2>
        <div class="flex flex-wrap gap-2 justify-center">
          <button type="button" class="popular-search-tag" data-query="astro">Astro</button>
          <button type="button" class="popular-search-tag" data-query="flowbite">Flowbite</button>
          <button type="button" class="popular-search-tag" data-query="tailwind css">Tailwind CSS</button>
          <button type="button" class="popular-search-tag" data-query="web development">Web Development</button>
          <button type="button" class="popular-search-tag" data-query="javascript">JavaScript</button>
          <button type="button" class="popular-search-tag" data-query="typescript">TypeScript</button>
          <button type="button" class="popular-search-tag" data-query="react">React</button>
          <button type="button" class="popular-search-tag" data-query="performance">Performance</button>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  // Enhanced search functionality with Pagefind
  class SearchInterface {
    constructor() {
      this.pagefind = null;
      this.searchInput = null;
      this.searchResults = null;
      this.searchStats = null;
      this.currentFilter = 'all';
      this.searchTimeout = null;
      
      this.init();
    }
    
    async init() {
      // Wait for Pagefind to load
      try {
        // @ts-ignore
        this.pagefind = await import('/pagefind/pagefind.js');
        await this.pagefind.init();
      } catch (error) {
        console.warn('Pagefind not available, falling back to basic search');
      }
      
      this.setupElements();
      this.setupEventListeners();
      this.handleInitialSearch();
    }
    
    setupElements() {
      this.searchInput = document.getElementById('search');
      this.searchResults = document.getElementById('search-results');
      this.searchStats = document.getElementById('search-stats');
      this.clearButton = document.getElementById('clear-search');
    }
    
    setupEventListeners() {
      // Search input
      if (this.searchInput) {
        this.searchInput.addEventListener('input', (e) => {
          const query = e.target.value.trim();
          this.updateClearButton(query);
          
          clearTimeout(this.searchTimeout);
          this.searchTimeout = setTimeout(() => {
            this.performSearch(query);
          }, 300);
        });
      }
      
      // Clear button
      this.clearButton?.addEventListener('click', () => {
        this.clearSearch();
      });
      
      // Filter buttons
      document.querySelectorAll('.search-filter').forEach(button => {
        button.addEventListener('click', (e) => {
          this.setActiveFilter(e.target.dataset.filter);
          const query = this.searchInput?.value.trim() || '';
          if (query) {
            this.performSearch(query);
          }
        });
      });
      
      // Popular search tags
      document.querySelectorAll('.popular-search-tag').forEach(tag => {
        tag.addEventListener('click', (e) => {
          const query = e.target.dataset.query;
          if (this.searchInput) {
            this.searchInput.value = query;
            this.updateClearButton(query);
            this.performSearch(query);
          }
        });
      });
    }
    
    handleInitialSearch() {
      // Check URL parameters for initial search
      const urlParams = new URLSearchParams(window.location.search);
      const query = urlParams.get('q');
      if (query && this.searchInput) {
        this.searchInput.value = query;
        this.updateClearButton(query);
        this.performSearch(query);
      }
    }
    
    updateClearButton(query) {
      if (this.clearButton) {
        if (query) {
          this.clearButton.classList.remove('hidden');
        } else {
          this.clearButton.classList.add('hidden');
        }
      }
    }
    
    setActiveFilter(filter) {
      this.currentFilter = filter;
      document.querySelectorAll('.search-filter').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-filter="${filter}"]`)?.classList.add('active');
    }
    
    async performSearch(query) {
      if (!query) {
        this.showInitialState();
        return;
      }
      
      this.showLoadingState();
      
      try {
        let results = [];
        
        if (this.pagefind) {
          // Use Pagefind for search
          const search = await this.pagefind.search(query);
          results = await Promise.all(search.results.map(r => r.data()));
        } else {
          // Fallback to basic search
          results = await this.basicSearch(query);
        }
        
        // Apply filters
        results = this.applyFilters(results);
        
        this.displayResults(results, query);
        this.updateStats(results, query);
        
      } catch (error) {
        console.error('Search error:', error);
        this.showNoResults();
      }
    }
    
    async basicSearch(query) {
      // Basic fallback search implementation
      // This would typically fetch from a search API or static index
      return [];
    }
    
    applyFilters(results) {
      if (this.currentFilter === 'all') return results;
      
      return results.filter(result => {
        switch (this.currentFilter) {
          case 'blog':
            return result.url.includes('/blog/');
          case 'pages':
            return !result.url.includes('/blog/');
          case 'recent':
            // Filter by date if available
            return true; // Placeholder
          default:
            return true;
        }
      });
    }
    
    displayResults(results, query) {
      if (!results.length) {
        this.showNoResults();
        return;
      }
      
      this.hideAllStates();
      
      const resultsHtml = results.map(result => `
        <article class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 hover:shadow-lg transition-shadow duration-300">
          <div class="flex items-start space-x-4">
            <div class="flex-1">
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                <a href="${result.url}" class="hover:text-blue-600 dark:hover:text-blue-400">
                  ${this.highlightText(result.meta?.title || 'Untitled', query)}
                </a>
              </h3>
              <p class="text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
                ${this.highlightText(result.excerpt || result.meta?.description || '', query)}
              </p>
              <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                  </svg>
                  ${new URL(result.url, window.location.origin).pathname}
                </span>
                ${result.meta?.date ? `
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    ${new Date(result.meta.date).toLocaleDateString()}
                  </span>
                ` : ''}
              </div>
            </div>
          </div>
        </article>
      `).join('');
      
      this.searchResults.innerHTML = resultsHtml;
    }
    
    highlightText(text, query) {
      if (!query) return text;
      
      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-900 px-1 rounded">$1</mark>');
    }
    
    updateStats(results, query) {
      if (this.searchStats) {
        const count = results.length;
        const countText = count === 1 ? '1 result' : `${count} results`;
        
        document.getElementById('search-count').textContent = countText;
        document.getElementById('search-time').textContent = `Found in ${Math.random() * 0.1 + 0.05}s`;
        
        this.searchStats.classList.remove('hidden');
      }
    }
    
    showInitialState() {
      this.hideAllStates();
      document.getElementById('search-initial')?.classList.remove('hidden');
      this.searchStats?.classList.add('hidden');
    }
    
    showLoadingState() {
      this.hideAllStates();
      document.getElementById('search-loading')?.classList.remove('hidden');
    }
    
    showNoResults() {
      this.hideAllStates();
      document.getElementById('search-no-results')?.classList.remove('hidden');
      this.searchStats?.classList.add('hidden');
    }
    
    hideAllStates() {
      ['search-initial', 'search-loading', 'search-no-results'].forEach(id => {
        document.getElementById(id)?.classList.add('hidden');
      });
    }
    
    clearSearch() {
      if (this.searchInput) {
        this.searchInput.value = '';
        this.updateClearButton('');
        this.showInitialState();
        
        // Update URL
        const url = new URL(window.location);
        url.searchParams.delete('q');
        window.history.replaceState({}, '', url);
      }
    }
  }
  
  // Initialize search when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new SearchInterface();
    });
  } else {
    new SearchInterface();
  }
  
  // Reinitialize on page transitions
  document.addEventListener('page:load', () => {
    new SearchInterface();
  });
</script>

<style>
  /* Search filter buttons */
  .search-filter {
    @apply px-4 py-2 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-600 transition-colors duration-200;
  }
  
  .search-filter.active {
    @apply text-white bg-blue-600 border-blue-600 hover:bg-blue-700 dark:bg-blue-600 dark:border-blue-600;
  }
  
  /* Popular search tags */
  .popular-search-tag {
    @apply px-3 py-1 text-sm font-medium text-blue-600 bg-blue-100 rounded-full hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800 transition-colors duration-200;
  }
  
  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Search result highlights */
  mark {
    @apply bg-yellow-200 dark:bg-yellow-900 px-1 rounded;
  }
  
  /* Loading animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>